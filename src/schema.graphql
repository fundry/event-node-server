# import Event from "../prisma/prisma.graphql"
# import User from "../prisma/prisma.graphql"
# import File from "../prisma/prisma.graphql"

type Query {
  info: String

  # single queries
  event(where: EventWhereUniqueInput): Event
  user(where: UserWhereUniqueInput): User

  # multiple queries
  allEvent: [Event!]
  allUser: [User!]
  node(id: ID!): Node
}

type Mutation {
  # Event Mutations ===========>
  createUser(
    where: UniqueInput
    name: String!
    email: String!
    password: String!
    bucketLink: String
  ): User
  
  createGoogleUser(name: String!, email: String!, password: String!): User
  
  createEvent(
    where: UniqueInput
    name: String!
    description: String
    duration: Int
    email: String
    organizer: String
    type: String!
    venue: String!
    date: Int
    supportEmail: String!
    website: String
    password: String!
    attendees: Int
    teams: Int
    bucketLink: String
  ): Event

  createFile(
    id: ID
    filename: String
    mimetype: String
    size: String
    uri: String
    encoding: String
  ): File

  #  =======================>>

  # authentication ================>
  loginUser(where: UniqueInput!, name: String!, password: String!): AuthPayload

  loginEvent(where: UniqueInput!, name: String!, password: String!): AuthPayload

  loginEventMember(
    where: UniqueInput!
    name: String!
    password: String!
  ): AuthPayload

  # cloud functions resolvers here
  sendEmail(email: String): Event
}

type AuthPayload {
  token: String
  user: User
}
 
type UploadPayload { 
  bucketLink: String
}

input UniqueInput {
  id: ID
  email: String
}
