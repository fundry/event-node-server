// Code generated by Prisma (prisma@1.34.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  attendee: (where?: AttendeeWhereInput) => Promise<boolean>;
  event: (where?: EventWhereInput) => Promise<boolean>;
  eventTeam: (where?: EventTeamWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  attendee: (where: AttendeeWhereUniqueInput) => AttendeeNullablePromise;
  attendees: (args?: {
    where?: AttendeeWhereInput;
    orderBy?: AttendeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Attendee>;
  attendeesConnection: (args?: {
    where?: AttendeeWhereInput;
    orderBy?: AttendeeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AttendeeConnectionPromise;
  event: (where: EventWhereUniqueInput) => EventNullablePromise;
  events: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Event>;
  eventsConnection: (args?: {
    where?: EventWhereInput;
    orderBy?: EventOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventConnectionPromise;
  eventTeam: (where: EventTeamWhereUniqueInput) => EventTeamNullablePromise;
  eventTeams: (args?: {
    where?: EventTeamWhereInput;
    orderBy?: EventTeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<EventTeam>;
  eventTeamsConnection: (args?: {
    where?: EventTeamWhereInput;
    orderBy?: EventTeamOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => EventTeamConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAttendee: (data: AttendeeCreateInput) => AttendeePromise;
  updateAttendee: (args: {
    data: AttendeeUpdateInput;
    where: AttendeeWhereUniqueInput;
  }) => AttendeePromise;
  upsertAttendee: (args: {
    where: AttendeeWhereUniqueInput;
    create: AttendeeCreateInput;
    update: AttendeeUpdateInput;
  }) => AttendeePromise;
  deleteAttendee: (where: AttendeeWhereUniqueInput) => AttendeePromise;
  deleteManyAttendees: (where?: AttendeeWhereInput) => BatchPayloadPromise;
  createEvent: (data: EventCreateInput) => EventPromise;
  updateEvent: (args: {
    data: EventUpdateInput;
    where: EventWhereUniqueInput;
  }) => EventPromise;
  updateManyEvents: (args: {
    data: EventUpdateManyMutationInput;
    where?: EventWhereInput;
  }) => BatchPayloadPromise;
  upsertEvent: (args: {
    where: EventWhereUniqueInput;
    create: EventCreateInput;
    update: EventUpdateInput;
  }) => EventPromise;
  deleteEvent: (where: EventWhereUniqueInput) => EventPromise;
  deleteManyEvents: (where?: EventWhereInput) => BatchPayloadPromise;
  createEventTeam: (data: EventTeamCreateInput) => EventTeamPromise;
  updateEventTeam: (args: {
    data: EventTeamUpdateInput;
    where: EventTeamWhereUniqueInput;
  }) => EventTeamPromise;
  updateManyEventTeams: (args: {
    data: EventTeamUpdateManyMutationInput;
    where?: EventTeamWhereInput;
  }) => BatchPayloadPromise;
  upsertEventTeam: (args: {
    where: EventTeamWhereUniqueInput;
    create: EventTeamCreateInput;
    update: EventTeamUpdateInput;
  }) => EventTeamPromise;
  deleteEventTeam: (where: EventTeamWhereUniqueInput) => EventTeamPromise;
  deleteManyEventTeams: (where?: EventTeamWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  attendee: (
    where?: AttendeeSubscriptionWhereInput
  ) => AttendeeSubscriptionPayloadSubscription;
  event: (
    where?: EventSubscriptionWhereInput
  ) => EventSubscriptionPayloadSubscription;
  eventTeam: (
    where?: EventTeamSubscriptionWhereInput
  ) => EventTeamSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AttendeeOrderByInput = "id_ASC" | "id_DESC";

export type EventOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "organizer_ASC"
  | "organizer_DESC"
  | "type_ASC"
  | "type_DESC"
  | "venue_ASC"
  | "venue_DESC"
  | "date_ASC"
  | "date_DESC"
  | "supportEmail_ASC"
  | "supportEmail_DESC"
  | "website_ASC"
  | "website_DESC"
  | "password_ASC"
  | "password_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "attendees_ASC"
  | "attendees_DESC"
  | "teams_ASC"
  | "teams_DESC"
  | "bucketLink_ASC"
  | "bucketLink_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type EventTeamOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "bucketLink_ASC"
  | "bucketLink_DESC";

export interface EventTeamCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description: String;
}

export type AttendeeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface EventUpsertNestedInput {
  update: EventUpdateDataInput;
  create: EventCreateInput;
}

export interface EventWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  duration?: Maybe<Int>;
  duration_not?: Maybe<Int>;
  duration_in?: Maybe<Int[] | Int>;
  duration_not_in?: Maybe<Int[] | Int>;
  duration_lt?: Maybe<Int>;
  duration_lte?: Maybe<Int>;
  duration_gt?: Maybe<Int>;
  duration_gte?: Maybe<Int>;
  organizer?: Maybe<String>;
  organizer_not?: Maybe<String>;
  organizer_in?: Maybe<String[] | String>;
  organizer_not_in?: Maybe<String[] | String>;
  organizer_lt?: Maybe<String>;
  organizer_lte?: Maybe<String>;
  organizer_gt?: Maybe<String>;
  organizer_gte?: Maybe<String>;
  organizer_contains?: Maybe<String>;
  organizer_not_contains?: Maybe<String>;
  organizer_starts_with?: Maybe<String>;
  organizer_not_starts_with?: Maybe<String>;
  organizer_ends_with?: Maybe<String>;
  organizer_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  venue?: Maybe<String>;
  venue_not?: Maybe<String>;
  venue_in?: Maybe<String[] | String>;
  venue_not_in?: Maybe<String[] | String>;
  venue_lt?: Maybe<String>;
  venue_lte?: Maybe<String>;
  venue_gt?: Maybe<String>;
  venue_gte?: Maybe<String>;
  venue_contains?: Maybe<String>;
  venue_not_contains?: Maybe<String>;
  venue_starts_with?: Maybe<String>;
  venue_not_starts_with?: Maybe<String>;
  venue_ends_with?: Maybe<String>;
  venue_not_ends_with?: Maybe<String>;
  date?: Maybe<Int>;
  date_not?: Maybe<Int>;
  date_in?: Maybe<Int[] | Int>;
  date_not_in?: Maybe<Int[] | Int>;
  date_lt?: Maybe<Int>;
  date_lte?: Maybe<Int>;
  date_gt?: Maybe<Int>;
  date_gte?: Maybe<Int>;
  supportEmail?: Maybe<String>;
  supportEmail_not?: Maybe<String>;
  supportEmail_in?: Maybe<String[] | String>;
  supportEmail_not_in?: Maybe<String[] | String>;
  supportEmail_lt?: Maybe<String>;
  supportEmail_lte?: Maybe<String>;
  supportEmail_gt?: Maybe<String>;
  supportEmail_gte?: Maybe<String>;
  supportEmail_contains?: Maybe<String>;
  supportEmail_not_contains?: Maybe<String>;
  supportEmail_starts_with?: Maybe<String>;
  supportEmail_not_starts_with?: Maybe<String>;
  supportEmail_ends_with?: Maybe<String>;
  supportEmail_not_ends_with?: Maybe<String>;
  website?: Maybe<String>;
  website_not?: Maybe<String>;
  website_in?: Maybe<String[] | String>;
  website_not_in?: Maybe<String[] | String>;
  website_lt?: Maybe<String>;
  website_lte?: Maybe<String>;
  website_gt?: Maybe<String>;
  website_gte?: Maybe<String>;
  website_contains?: Maybe<String>;
  website_not_contains?: Maybe<String>;
  website_starts_with?: Maybe<String>;
  website_not_starts_with?: Maybe<String>;
  website_ends_with?: Maybe<String>;
  website_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  attendees?: Maybe<Int>;
  attendees_not?: Maybe<Int>;
  attendees_in?: Maybe<Int[] | Int>;
  attendees_not_in?: Maybe<Int[] | Int>;
  attendees_lt?: Maybe<Int>;
  attendees_lte?: Maybe<Int>;
  attendees_gt?: Maybe<Int>;
  attendees_gte?: Maybe<Int>;
  teams?: Maybe<Int>;
  teams_not?: Maybe<Int>;
  teams_in?: Maybe<Int[] | Int>;
  teams_not_in?: Maybe<Int[] | Int>;
  teams_lt?: Maybe<Int>;
  teams_lte?: Maybe<Int>;
  teams_gt?: Maybe<Int>;
  teams_gte?: Maybe<Int>;
  bucketLink?: Maybe<String>;
  bucketLink_not?: Maybe<String>;
  bucketLink_in?: Maybe<String[] | String>;
  bucketLink_not_in?: Maybe<String[] | String>;
  bucketLink_lt?: Maybe<String>;
  bucketLink_lte?: Maybe<String>;
  bucketLink_gt?: Maybe<String>;
  bucketLink_gte?: Maybe<String>;
  bucketLink_contains?: Maybe<String>;
  bucketLink_not_contains?: Maybe<String>;
  bucketLink_starts_with?: Maybe<String>;
  bucketLink_not_starts_with?: Maybe<String>;
  bucketLink_ends_with?: Maybe<String>;
  bucketLink_not_ends_with?: Maybe<String>;
  AND?: Maybe<EventWhereInput[] | EventWhereInput>;
  OR?: Maybe<EventWhereInput[] | EventWhereInput>;
  NOT?: Maybe<EventWhereInput[] | EventWhereInput>;
}

export interface EventTeamWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<EventTeamWhereInput[] | EventTeamWhereInput>;
  OR?: Maybe<EventTeamWhereInput[] | EventTeamWhereInput>;
  NOT?: Maybe<EventTeamWhereInput[] | EventTeamWhereInput>;
}

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  bucketLink?: Maybe<String>;
}

export interface EventSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventWhereInput>;
  AND?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  OR?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
  NOT?: Maybe<EventSubscriptionWhereInput[] | EventSubscriptionWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  password: String;
  bucketLink?: Maybe<String>;
}

export interface EventUpdateDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  duration?: Maybe<Int>;
  organizer?: Maybe<String>;
  type?: Maybe<String>;
  venue?: Maybe<String>;
  date?: Maybe<Int>;
  supportEmail?: Maybe<String>;
  website?: Maybe<String>;
  password?: Maybe<String>;
  attendees?: Maybe<Int>;
  teams?: Maybe<Int>;
  bucketLink?: Maybe<String>;
}

export interface EventTeamUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface EventUpdateOneInput {
  create?: Maybe<EventCreateInput>;
  update?: Maybe<EventUpdateDataInput>;
  upsert?: Maybe<EventUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface AttendeeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AttendeeWhereInput>;
  AND?: Maybe<
    AttendeeSubscriptionWhereInput[] | AttendeeSubscriptionWhereInput
  >;
  OR?: Maybe<AttendeeSubscriptionWhereInput[] | AttendeeSubscriptionWhereInput>;
  NOT?: Maybe<
    AttendeeSubscriptionWhereInput[] | AttendeeSubscriptionWhereInput
  >;
}

export interface AttendeeUpdateInput {
  event?: Maybe<EventUpdateOneInput>;
}

export interface EventUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  duration?: Maybe<Int>;
  organizer?: Maybe<String>;
  type?: Maybe<String>;
  venue?: Maybe<String>;
  date?: Maybe<Int>;
  supportEmail?: Maybe<String>;
  website?: Maybe<String>;
  password?: Maybe<String>;
  attendees?: Maybe<Int>;
  teams?: Maybe<Int>;
  bucketLink?: Maybe<String>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}>;

export type EventTeamWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface EventCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  duration?: Maybe<Int>;
  organizer?: Maybe<String>;
  type: String;
  venue: String;
  date?: Maybe<Int>;
  supportEmail: String;
  website?: Maybe<String>;
  password: String;
  attendees?: Maybe<Int>;
  teams?: Maybe<Int>;
  bucketLink?: Maybe<String>;
}

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  bucketLink?: Maybe<String>;
}

export interface AttendeeCreateInput {
  id?: Maybe<ID_Input>;
  event?: Maybe<EventCreateOneInput>;
}

export interface EventCreateOneInput {
  create?: Maybe<EventCreateInput>;
  connect?: Maybe<EventWhereUniqueInput>;
}

export interface EventTeamSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<EventTeamWhereInput>;
  AND?: Maybe<
    EventTeamSubscriptionWhereInput[] | EventTeamSubscriptionWhereInput
  >;
  OR?: Maybe<
    EventTeamSubscriptionWhereInput[] | EventTeamSubscriptionWhereInput
  >;
  NOT?: Maybe<
    EventTeamSubscriptionWhereInput[] | EventTeamSubscriptionWhereInput
  >;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  bucketLink?: Maybe<String>;
  bucketLink_not?: Maybe<String>;
  bucketLink_in?: Maybe<String[] | String>;
  bucketLink_not_in?: Maybe<String[] | String>;
  bucketLink_lt?: Maybe<String>;
  bucketLink_lte?: Maybe<String>;
  bucketLink_gt?: Maybe<String>;
  bucketLink_gte?: Maybe<String>;
  bucketLink_contains?: Maybe<String>;
  bucketLink_not_contains?: Maybe<String>;
  bucketLink_starts_with?: Maybe<String>;
  bucketLink_not_starts_with?: Maybe<String>;
  bucketLink_ends_with?: Maybe<String>;
  bucketLink_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface EventTeamUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
}

export interface AttendeeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  event?: Maybe<EventWhereInput>;
  AND?: Maybe<AttendeeWhereInput[] | AttendeeWhereInput>;
  OR?: Maybe<AttendeeWhereInput[] | AttendeeWhereInput>;
  NOT?: Maybe<AttendeeWhereInput[] | AttendeeWhereInput>;
}

export interface EventUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  duration?: Maybe<Int>;
  organizer?: Maybe<String>;
  type?: Maybe<String>;
  venue?: Maybe<String>;
  date?: Maybe<Int>;
  supportEmail?: Maybe<String>;
  website?: Maybe<String>;
  password?: Maybe<String>;
  attendees?: Maybe<Int>;
  teams?: Maybe<Int>;
  bucketLink?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export type EventWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
  supportEmail?: Maybe<String>;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  bucketLink?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  bucketLink: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  bucketLink: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AttendeeConnection {
  pageInfo: PageInfo;
  edges: AttendeeEdge[];
}

export interface AttendeeConnectionPromise
  extends Promise<AttendeeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AttendeeEdge>>() => T;
  aggregate: <T = AggregateAttendeePromise>() => T;
}

export interface AttendeeConnectionSubscription
  extends Promise<AsyncIterator<AttendeeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AttendeeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAttendeeSubscription>() => T;
}

export interface AggregateEventTeam {
  count: Int;
}

export interface AggregateEventTeamPromise
  extends Promise<AggregateEventTeam>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventTeamSubscription
  extends Promise<AsyncIterator<AggregateEventTeam>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  password: String;
  bucketLink?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  bucketLink: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  bucketLink: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  bucketLink: () => Promise<String>;
}

export interface Event {
  id: ID_Output;
  name: String;
  description?: String;
  duration?: Int;
  organizer?: String;
  type: String;
  venue: String;
  date?: Int;
  supportEmail: String;
  website?: String;
  password: String;
  createdAt: DateTimeOutput;
  attendees?: Int;
  teams?: Int;
  bucketLink?: String;
}

export interface EventPromise extends Promise<Event>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  duration: () => Promise<Int>;
  organizer: () => Promise<String>;
  type: () => Promise<String>;
  venue: () => Promise<String>;
  date: () => Promise<Int>;
  supportEmail: () => Promise<String>;
  website: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  attendees: () => Promise<Int>;
  teams: () => Promise<Int>;
  bucketLink: () => Promise<String>;
}

export interface EventSubscription
  extends Promise<AsyncIterator<Event>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  organizer: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  venue: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<Int>>;
  supportEmail: () => Promise<AsyncIterator<String>>;
  website: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  attendees: () => Promise<AsyncIterator<Int>>;
  teams: () => Promise<AsyncIterator<Int>>;
  bucketLink: () => Promise<AsyncIterator<String>>;
}

export interface EventNullablePromise
  extends Promise<Event | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  duration: () => Promise<Int>;
  organizer: () => Promise<String>;
  type: () => Promise<String>;
  venue: () => Promise<String>;
  date: () => Promise<Int>;
  supportEmail: () => Promise<String>;
  website: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  attendees: () => Promise<Int>;
  teams: () => Promise<Int>;
  bucketLink: () => Promise<String>;
}

export interface EventTeamEdge {
  node: EventTeam;
  cursor: String;
}

export interface EventTeamEdgePromise
  extends Promise<EventTeamEdge>,
    Fragmentable {
  node: <T = EventTeamPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventTeamEdgeSubscription
  extends Promise<AsyncIterator<EventTeamEdge>>,
    Fragmentable {
  node: <T = EventTeamSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EventTeamConnection {
  pageInfo: PageInfo;
  edges: EventTeamEdge[];
}

export interface EventTeamConnectionPromise
  extends Promise<EventTeamConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventTeamEdge>>() => T;
  aggregate: <T = AggregateEventTeamPromise>() => T;
}

export interface EventTeamConnectionSubscription
  extends Promise<AsyncIterator<EventTeamConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventTeamEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventTeamSubscription>() => T;
}

export interface EventTeam {
  id: ID_Output;
  name: String;
  description: String;
  createdAt: DateTimeOutput;
}

export interface EventTeamPromise extends Promise<EventTeam>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EventTeamSubscription
  extends Promise<AsyncIterator<EventTeam>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventTeamNullablePromise
  extends Promise<EventTeam | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface EventTeamPreviousValues {
  id: ID_Output;
  name: String;
  description: String;
  createdAt: DateTimeOutput;
}

export interface EventTeamPreviousValuesPromise
  extends Promise<EventTeamPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface EventTeamPreviousValuesSubscription
  extends Promise<AsyncIterator<EventTeamPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface EventEdge {
  node: Event;
  cursor: String;
}

export interface EventEdgePromise extends Promise<EventEdge>, Fragmentable {
  node: <T = EventPromise>() => T;
  cursor: () => Promise<String>;
}

export interface EventEdgeSubscription
  extends Promise<AsyncIterator<EventEdge>>,
    Fragmentable {
  node: <T = EventSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AttendeeSubscriptionPayload {
  mutation: MutationType;
  node: Attendee;
  updatedFields: String[];
  previousValues: AttendeePreviousValues;
}

export interface AttendeeSubscriptionPayloadPromise
  extends Promise<AttendeeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AttendeePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AttendeePreviousValuesPromise>() => T;
}

export interface AttendeeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AttendeeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AttendeeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AttendeePreviousValuesSubscription>() => T;
}

export interface AggregateAttendee {
  count: Int;
}

export interface AggregateAttendeePromise
  extends Promise<AggregateAttendee>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAttendeeSubscription
  extends Promise<AsyncIterator<AggregateAttendee>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Attendee {
  id: ID_Output;
}

export interface AttendeePromise extends Promise<Attendee>, Fragmentable {
  id: () => Promise<ID_Output>;
  event: <T = EventPromise>() => T;
}

export interface AttendeeSubscription
  extends Promise<AsyncIterator<Attendee>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  event: <T = EventSubscription>() => T;
}

export interface AttendeeNullablePromise
  extends Promise<Attendee | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  event: <T = EventPromise>() => T;
}

export interface EventPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  duration?: Int;
  organizer?: String;
  type: String;
  venue: String;
  date?: Int;
  supportEmail: String;
  website?: String;
  password: String;
  createdAt: DateTimeOutput;
  attendees?: Int;
  teams?: Int;
  bucketLink?: String;
}

export interface EventPreviousValuesPromise
  extends Promise<EventPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  duration: () => Promise<Int>;
  organizer: () => Promise<String>;
  type: () => Promise<String>;
  venue: () => Promise<String>;
  date: () => Promise<Int>;
  supportEmail: () => Promise<String>;
  website: () => Promise<String>;
  password: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  attendees: () => Promise<Int>;
  teams: () => Promise<Int>;
  bucketLink: () => Promise<String>;
}

export interface EventPreviousValuesSubscription
  extends Promise<AsyncIterator<EventPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  organizer: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  venue: () => Promise<AsyncIterator<String>>;
  date: () => Promise<AsyncIterator<Int>>;
  supportEmail: () => Promise<AsyncIterator<String>>;
  website: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  attendees: () => Promise<AsyncIterator<Int>>;
  teams: () => Promise<AsyncIterator<Int>>;
  bucketLink: () => Promise<AsyncIterator<String>>;
}

export interface EventSubscriptionPayload {
  mutation: MutationType;
  node: Event;
  updatedFields: String[];
  previousValues: EventPreviousValues;
}

export interface EventSubscriptionPayloadPromise
  extends Promise<EventSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventPreviousValuesPromise>() => T;
}

export interface EventSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventPreviousValuesSubscription>() => T;
}

export interface EventTeamSubscriptionPayload {
  mutation: MutationType;
  node: EventTeam;
  updatedFields: String[];
  previousValues: EventTeamPreviousValues;
}

export interface EventTeamSubscriptionPayloadPromise
  extends Promise<EventTeamSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = EventTeamPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = EventTeamPreviousValuesPromise>() => T;
}

export interface EventTeamSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<EventTeamSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = EventTeamSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = EventTeamPreviousValuesSubscription>() => T;
}

export interface AttendeePreviousValues {
  id: ID_Output;
}

export interface AttendeePreviousValuesPromise
  extends Promise<AttendeePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface AttendeePreviousValuesSubscription
  extends Promise<AsyncIterator<AttendeePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AttendeeEdge {
  node: Attendee;
  cursor: String;
}

export interface AttendeeEdgePromise
  extends Promise<AttendeeEdge>,
    Fragmentable {
  node: <T = AttendeePromise>() => T;
  cursor: () => Promise<String>;
}

export interface AttendeeEdgeSubscription
  extends Promise<AsyncIterator<AttendeeEdge>>,
    Fragmentable {
  node: <T = AttendeeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface EventConnection {
  pageInfo: PageInfo;
  edges: EventEdge[];
}

export interface EventConnectionPromise
  extends Promise<EventConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<EventEdge>>() => T;
  aggregate: <T = AggregateEventPromise>() => T;
}

export interface EventConnectionSubscription
  extends Promise<AsyncIterator<EventConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<EventEdgeSubscription>>>() => T;
  aggregate: <T = AggregateEventSubscription>() => T;
}

export interface AggregateEvent {
  count: Int;
}

export interface AggregateEventPromise
  extends Promise<AggregateEvent>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateEventSubscription
  extends Promise<AsyncIterator<AggregateEvent>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Event",
    embedded: false
  },
  {
    name: "Attendee",
    embedded: false
  },
  {
    name: "EventTeam",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
